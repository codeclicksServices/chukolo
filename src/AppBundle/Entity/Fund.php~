<?php

namespace AppBundle\Entity;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\HttpFoundation\File\File;
use Doctrine\Common\Collections\ArrayCollection;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Vich\UploaderBundle\Mapping\Annotation as Vich;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * @ORM\Entity
 * @ORM\Table(name="funds")
 * @ORM\HasLifecycleCallbacks
 * @ORM\Entity(repositoryClass="AppBundle\Repository\FundRepository")
 *  @Vich\Uploadable
 *
 * confirmed money in your chukolo account its source is either milestone received for a job don or your deposit
 */
class  Fund
{
    /**
     * @ORM\Column(type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @ORM\Column(type="string", nullable=false, options={"comment":"fund value i.e this amount is equal to the $reserved + usableAmount + paidOutAmount"})
     */
    protected $amount;

    /**
     * @ORM\Column(type="string", nullable=false, options={"comment":"this is the amount reserved that you cannot withdraw or use its either saved up for milestone suscription or about to be withdrawn"})
     */
    protected $reserved;

    /**
     * @ORM\Column(type="string", nullable=false, options={"comment":"amount not reserved it can be used for everything on chukolo i.e ur balance "})
     */
    protected $usableAmount;
    /**
     * @ORM\Column(type="string", nullable=true, options={"comment":"this is the reservation amount you paid "})
     */
    protected $paidOutAmount;
    /**
     * @ORM\Column(type="string", nullable=true, options={"comment":"this is the reservation amount + usable amount "})
     */
    protected $bookBalance;
    /**
     * @ORM\Column(type="string", nullable=true, options={"comment":"the currency is  ngn for now"})
     */
    protected $currency;
    /**
     * @ORM\Column(type="string", nullable=false, options={"comment":"where the fund came from is it deposit or job payment "})
     */
    protected $source;
    /**
     * @ORM\Column(type="string", nullable=false, options={"comment":"received value i.e the amount deposited or received from doing a project "})
     * is going to be paid from the source that ph
     */
    protected $received;

    /**
     * @ORM\Column(type="string", nullable=false,
     *options={"comment":" later","default":"created"})
     *
     */
    protected $status;
    /**
     * @ORM\Column(type="smallint",nullable=true, options={"unsigned":false,"comment":"this would be closed wen the money is either fully reserved or used up" ,"default":0})
    http://127.0.0.1:8000/_profiler/ce378d?panel=config     */
    protected $closeUsage;

    /**
     * @ORM\Column(type="smallint", nullable=true, options={"unsigned":false, "default":0})
     */
    protected $complete;

    /**
     * @ORM\Column(type="smallint",nullable=true, options={"unsigned":false,"comment":"this is used for either enabling or disabling the withdrawal of this fund " , "default":0})
     */
    protected $payout;
    /**
     * @ORM\Column(type="datetime")
     * date created
     */
    protected $created;

    /**
     * @ORM\Column(type="datetime",nullable=true)
     * when the ph was completed
     */
    protected $completedAt;




    /*
     * relationships
     * 1 who owns no need for direct relationship cus it came from a source
     * 2 source where the money came from i .e deposit id or milestone id
     * outlet is withdrawal id
     * invoice
     *
     */

    /**
     * one source of fund
     * @ORM\OneToOne(targetEntity="Deposit", inversedBy="fund")
     * @ORM\JoinColumn(name="deposit_id", referencedColumnName="id", nullable=true)
     */
    private $deposit;

    /**
     * second source of fund
     * @ORM\OneToOne(targetEntity="Milestone", inversedBy="fund")
     * @ORM\JoinColumn(name="milestone_id", referencedColumnName="id", nullable=true)
     */
    private $milestone;

    /**
     *  @ORM\OneToMany(targetEntity="Withdrawal", mappedBy="fund")
     */
    protected $withdrawal;
    /**
     * Constructor
     */
    public function __construct()
    {
        $this->withdrawal = new \Doctrine\Common\Collections\ArrayCollection();
    }

    /**
     * Get id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set reserved
     *
     * @param string $reserved
     *
     * @return Fund
     */
    public function setReserved($reserved)
    {
        $this->reserved = $reserved;

        return $this;
    }

    /**
     * Get reserved
     *
     * @return string
     */
    public function getReserved()
    {
        return $this->reserved;
    }

    /**
     * Set usableAmount
     *
     * @param string $usableAmount
     *
     * @return Fund
     */
    public function setUsableAmount($usableAmount)
    {
        $this->usableAmount = $usableAmount;

        return $this;
    }

    /**
     * Get usableAmount
     *
     * @return string
     */
    public function getUsableAmount()
    {
        return $this->usableAmount;
    }

    /**
     * Set paidOutAmount
     *
     * @param string $paidOutAmount
     *
     * @return Fund
     */
    public function setPaidOutAmount($paidOutAmount)
    {
        $this->paidOutAmount = $paidOutAmount;

        return $this;
    }

    /**
     * Get paidOutAmount
     *
     * @return string
     */
    public function getPaidOutAmount()
    {
        return $this->paidOutAmount;
    }

    /**
     * Set bookBalance
     *
     * @param string $bookBalance
     *
     * @return Fund
     */
    public function setBookBalance($bookBalance)
    {
        $this->bookBalance = $bookBalance;

        return $this;
    }

    /**
     * Get bookBalance
     *
     * @return string
     */
    public function getBookBalance()
    {
        return $this->bookBalance;
    }

    /**
     * Set currency
     *
     * @param string $currency
     *
     * @return Fund
     */
    public function setCurrency($currency)
    {
        $this->currency = $currency;

        return $this;
    }

    /**
     * Get currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->currency;
    }

    /**
     * Set source
     *
     * @param string $source
     *
     * @return Fund
     */
    public function setSource($source)
    {
        $this->source = $source;

        return $this;
    }

    /**
     * Get source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->source;
    }

    /**
     * Set received
     *
     * @param string $received
     *
     * @return Fund
     */
    public function setReceived($received)
    {
        $this->received = $received;

        return $this;
    }

    /**
     * Get received
     *
     * @return string
     */
    public function getReceived()
    {
        return $this->received;
    }

    /**
     * Set status
     *
     * @param string $status
     *
     * @return Fund
     */
    public function setStatus($status)
    {
        $this->status = $status;

        return $this;
    }

    /**
     * Get status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Set closeUsage
     *
     * @param integer $closeUsage
     *
     * @return Fund
     */
    public function setCloseUsage($closeUsage)
    {
        $this->closeUsage = $closeUsage;

        return $this;
    }

    /**
     * Get closeUsage
     *
     * @return integer
     */
    public function getCloseUsage()
    {
        return $this->closeUsage;
    }

    /**
     * Set complete
     *
     * @param integer $complete
     *
     * @return Fund
     */
    public function setComplete($complete)
    {
        $this->complete = $complete;

        return $this;
    }

    /**
     * Get complete
     *
     * @return integer
     */
    public function getComplete()
    {
        return $this->complete;
    }

    /**
     * Set payout
     *
     * @param integer $payout
     *
     * @return Fund
     */
    public function setPayout($payout)
    {
        $this->payout = $payout;

        return $this;
    }

    /**
     * Get payout
     *
     * @return integer
     */
    public function getPayout()
    {
        return $this->payout;
    }

    /**
     * Set created
     *
     * @param \DateTime $created
     *
     * @return Fund
     */
    public function setCreated($created)
    {
        $this->created = $created;

        return $this;
    }

    /**
     * Get created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->created;
    }

    /**
     * Set completedAt
     *
     * @param \DateTime $completedAt
     *
     * @return Fund
     */
    public function setCompletedAt($completedAt)
    {
        $this->completedAt = $completedAt;

        return $this;
    }

    /**
     * Get completedAt
     *
     * @return \DateTime
     */
    public function getCompletedAt()
    {
        return $this->completedAt;
    }

    /**
     * Set deposit
     *
     * @param \AppBundle\Entity\Deposit $deposit
     *
     * @return Fund
     */
    public function setDeposit(\AppBundle\Entity\Deposit $deposit = null)
    {
        $this->deposit = $deposit;

        return $this;
    }

    /**
     * Get deposit
     *
     * @return \AppBundle\Entity\Deposit
     */
    public function getDeposit()
    {
        return $this->deposit;
    }

    /**
     * Set milestone
     *
     * @param \AppBundle\Entity\Milestone $milestone
     *
     * @return Fund
     */
    public function setMilestone(\AppBundle\Entity\Milestone $milestone = null)
    {
        $this->milestone = $milestone;

        return $this;
    }

    /**
     * Get milestone
     *
     * @return \AppBundle\Entity\Milestone
     */
    public function getMilestone()
    {
        return $this->milestone;
    }

    /**
     * Add withdrawal
     *
     * @param \AppBundle\Entity\Withdrawal $withdrawal
     *
     * @return Fund
     */
    public function addWithdrawal(\AppBundle\Entity\Withdrawal $withdrawal)
    {
        $this->withdrawal[] = $withdrawal;

        return $this;
    }

    /**
     * Remove withdrawal
     *
     * @param \AppBundle\Entity\Withdrawal $withdrawal
     */
    public function removeWithdrawal(\AppBundle\Entity\Withdrawal $withdrawal)
    {
        $this->withdrawal->removeElement($withdrawal);
    }

    /**
     * Get withdrawal
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getWithdrawal()
    {
        return $this->withdrawal;
    }

    /**
     * Set amount
     *
     * @param string $amount
     *
     * @return Fund
     */
    public function setAmount($amount)
    {
        $this->amount = $amount;

        return $this;
    }

    /**
     * Get amount
     *
     * @return string
     */
    public function getAmount()
    {
        return $this->amount;
    }
}
