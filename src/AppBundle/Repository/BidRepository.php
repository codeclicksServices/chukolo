<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BidRepository extends EntityRepository
{
    public function findMyBid($user,$stage=null,$searchParam=null,$limit=null)
    {

        $query = $this ->createQueryBuilder('l')
            ->select('p')
            ->from('AppBundle:Bid','p')
            ->where('p.member = :member')
            ->andWhere('p.moderated = :true')
            ->andWhere('p.visible = :true')
            ->andWhere('p.moderatorResponse = :accepted')
            ->setParameter('true', true)
            ->setParameter('accepted', 'accepted')
            ->setParameter('member', $user);

        if(!$stage == null){
            //convert to lowercase because all the state is stored in the lowercase in the database
            $transformedStage=strtolower($stage);
            $query =  $query->andWhere('p.stage = :stage')
                ->setParameter('stage', $transformedStage);

        }

        if(!$searchParam == null){

            $cleanedParam  = '%'.trim($searchParam).'%';

            $query = $query->andWhere('p.name LIKE :name')
                ->orWhere('p.id LIKE :id')
                ->setParameter('name',$cleanedParam)
                ->setParameter('id',$cleanedParam);

        }

        if(!$limit == null){
            $query = $query->setMaxResults($limit);
        }

        $query->orderBy('p.created', 'DESC');
        $query = $query ->getQuery()->getResult();

        return $query;
    }

    public function findMyUnreviewedBid($user)
    {

        $query = $this ->createQueryBuilder('l')
            ->select('p')
            ->from('AppBundle:Bid','p')
            ->where('p.member = :member')
            ->andWhere('p.moderated = :false')
            ->setParameter('false', 0)
            ->setParameter('member', $user);


        $query->orderBy('p.created', 'DESC');
        $query = $query ->getQuery()->getResult();

        return $query;
    }

/* this is for awarded bid that are not complete*/
    public function findMyAwardedBid($user)
    {

        $query = $this ->createQueryBuilder('l')
            ->select('p')
            ->from('AppBundle:Bid','p')
            ->where('p.member = :member')
            ->andWhere('p.moderated = :true')
            ->andWhere('p.visible = :true')
            ->andWhere('p.moderatorResponse = :accepted')
            ->andWhere('p.awarded = :true')
            ->andWhere('p.stage != :complete')
            ->andWhere('p.stage != :declined')
            ->andWhere('p.stage != :terminated')
            ->setParameter('complete','complete')
            ->setParameter('declined','declined')
            ->setParameter('terminated','terminated')
            ->setParameter('accepted', 'accepted')
            ->setParameter('true', true)
            ->setParameter('member', $user)
            ->getQuery()
            ->getResult();

        return $query;
    }

    /*
         * todo: you can never have more than one active bid for one project.
         * todo enforce this for the sake of testing make it possible to have more than one
         */
    public function getMyProjectBid($member,$project) {
        return $this
            ->createQueryBuilder('e')
            ->select('e')
            ->where('e.member = :member')
            ->andWhere('e.project = :project')
            ->setParameter('member',$member)
            ->setParameter('project', $project)
            ->orderBy('e.id', 'DESC')
            ->setMaxResults(1)
            ->getQuery()
            ->getResult();
    }


    public function findBookMarkedProposal($project) {
        return $this
            ->createQueryBuilder('e')
            ->select('e')
            ->where('e.project = :project')
            ->andWhere('e.bookmark = :true')
            ->setParameter('true',true)
            ->setParameter('project', $project)
            ->orderBy('e.id', 'DESC')
            ->getQuery()
            ->getResult();
    }
    public function findAwardedProposal($project) {
        return $this
            ->createQueryBuilder('e')
            ->select('e')
            ->where('e.project = :project')
            ->andWhere('e.awarded = :true')
            ->setParameter('true',true)
            ->setParameter('project', $project)
            ->orderBy('e.id', 'DESC')
            ->getQuery()
            ->getResult();
    }
}
